1.使用list链表，双向链表

先决条件：
import "container/list"

1.1 定义双向链表(3种)：
  l1 := list.New()      //定义list链表
  l1.PushBack("name")   //尾部追加
  
  l2 := &list.List{}     //初始化一个链表
  l2.PushBack("age")
  
  l3 := new(list.List)   //和第二种类似
  l3.PushBack("pwd")
  
2.1 取值
  first := l1.Front()         //获取链表第一个元素的指针
  first_value := first.Value  //获取*Element的值
  
3.1 遍历

  for i:=1 ; i < 5 ; i++ {
    l1.PushBack(i)
  }
  
  for e := l1.Front() ; e != nil ; e = e.Next() {
    fmt.Println(e.Value)
  }
  
4.1 初始化和获取链表长度
  l1.Len()    //获取链表长度
  l1.Init()   //初始化链表

5.1 链表拼接
    func TestMove(t *testing.T) {
      l1 := list.New()
      l2 := list.New()

      l1.PushBack("name1")
      l2.PushBack("age1")

      //l1.PushBackList(l2)
      l1.PushFrontList(l2)

      for e:=l1.Front();e != nil; e=e.Next() {
        fmt.Println(e.Value)
      }
    }
    
    //output:
    === RUN   TestMove
    age1
    name1
    --- PASS: TestMove (0.00s)
    PASS
    ok      command-line-arguments  (cached)



